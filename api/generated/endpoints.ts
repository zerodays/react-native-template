/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Cat Fact API
 * An API for facts about cats
 * OpenAPI spec version: 1.0.0
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useQuery } from '@tanstack/react-query';

import type {
  Breed,
  CatFact,
  GetBreedsParams,
  GetFactsParams,
  GetRandomFactParams,
} from './model';

import type { ErrorType } from '../axios-instance';
import { customAxios } from '../axios-instance';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Returns a a list of breeds
 * @summary Get a list of breeds
 */
export const getBreeds = (
  params?: GetBreedsParams,
  options?: SecondParameter<typeof customAxios>,
  signal?: AbortSignal,
) => {
  return customAxios<Breed[]>(
    { url: `/breeds`, method: 'GET', params, signal },
    options,
  );
};

export const getGetBreedsQueryKey = (params?: GetBreedsParams) => {
  return [`/breeds`, ...(params ? [params] : [])] as const;
};

export const getGetBreedsQueryOptions = <
  TData = Awaited<ReturnType<typeof getBreeds>>,
  TError = ErrorType<unknown>,
>(
  params?: GetBreedsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBreeds>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxios>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetBreedsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getBreeds>>> = ({
    signal,
  }) => getBreeds(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getBreeds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetBreedsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getBreeds>>
>;
export type GetBreedsQueryError = ErrorType<unknown>;

export function useGetBreeds<
  TData = Awaited<ReturnType<typeof getBreeds>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetBreedsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBreeds>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBreeds>>,
          TError,
          Awaited<ReturnType<typeof getBreeds>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxios>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetBreeds<
  TData = Awaited<ReturnType<typeof getBreeds>>,
  TError = ErrorType<unknown>,
>(
  params?: GetBreedsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBreeds>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBreeds>>,
          TError,
          Awaited<ReturnType<typeof getBreeds>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxios>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetBreeds<
  TData = Awaited<ReturnType<typeof getBreeds>>,
  TError = ErrorType<unknown>,
>(
  params?: GetBreedsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBreeds>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxios>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get a list of breeds
 */

export function useGetBreeds<
  TData = Awaited<ReturnType<typeof getBreeds>>,
  TError = ErrorType<unknown>,
>(
  params?: GetBreedsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBreeds>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxios>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetBreedsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns a random fact
 * @summary Get Random Fact
 */
export const getRandomFact = (
  params?: GetRandomFactParams,
  options?: SecondParameter<typeof customAxios>,
  signal?: AbortSignal,
) => {
  return customAxios<CatFact>(
    { url: `/fact`, method: 'GET', params, signal },
    options,
  );
};

export const getGetRandomFactQueryKey = (params?: GetRandomFactParams) => {
  return [`/fact`, ...(params ? [params] : [])] as const;
};

export const getGetRandomFactQueryOptions = <
  TData = Awaited<ReturnType<typeof getRandomFact>>,
  TError = ErrorType<void>,
>(
  params?: GetRandomFactParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRandomFact>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxios>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRandomFactQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRandomFact>>> = ({
    signal,
  }) => getRandomFact(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRandomFact>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetRandomFactQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRandomFact>>
>;
export type GetRandomFactQueryError = ErrorType<void>;

export function useGetRandomFact<
  TData = Awaited<ReturnType<typeof getRandomFact>>,
  TError = ErrorType<void>,
>(
  params: undefined | GetRandomFactParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRandomFact>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRandomFact>>,
          TError,
          Awaited<ReturnType<typeof getRandomFact>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxios>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetRandomFact<
  TData = Awaited<ReturnType<typeof getRandomFact>>,
  TError = ErrorType<void>,
>(
  params?: GetRandomFactParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRandomFact>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRandomFact>>,
          TError,
          Awaited<ReturnType<typeof getRandomFact>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxios>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetRandomFact<
  TData = Awaited<ReturnType<typeof getRandomFact>>,
  TError = ErrorType<void>,
>(
  params?: GetRandomFactParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRandomFact>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxios>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get Random Fact
 */

export function useGetRandomFact<
  TData = Awaited<ReturnType<typeof getRandomFact>>,
  TError = ErrorType<void>,
>(
  params?: GetRandomFactParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRandomFact>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxios>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetRandomFactQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns a a list of facts
 * @summary Get a list of facts
 */
export const getFacts = (
  params?: GetFactsParams,
  options?: SecondParameter<typeof customAxios>,
  signal?: AbortSignal,
) => {
  return customAxios<CatFact[]>(
    { url: `/facts`, method: 'GET', params, signal },
    options,
  );
};

export const getGetFactsQueryKey = (params?: GetFactsParams) => {
  return [`/facts`, ...(params ? [params] : [])] as const;
};

export const getGetFactsQueryOptions = <
  TData = Awaited<ReturnType<typeof getFacts>>,
  TError = ErrorType<unknown>,
>(
  params?: GetFactsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFacts>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxios>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetFactsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFacts>>> = ({
    signal,
  }) => getFacts(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getFacts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetFactsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFacts>>
>;
export type GetFactsQueryError = ErrorType<unknown>;

export function useGetFacts<
  TData = Awaited<ReturnType<typeof getFacts>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | GetFactsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFacts>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFacts>>,
          TError,
          Awaited<ReturnType<typeof getFacts>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxios>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetFacts<
  TData = Awaited<ReturnType<typeof getFacts>>,
  TError = ErrorType<unknown>,
>(
  params?: GetFactsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFacts>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFacts>>,
          TError,
          Awaited<ReturnType<typeof getFacts>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxios>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetFacts<
  TData = Awaited<ReturnType<typeof getFacts>>,
  TError = ErrorType<unknown>,
>(
  params?: GetFactsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFacts>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxios>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Get a list of facts
 */

export function useGetFacts<
  TData = Awaited<ReturnType<typeof getFacts>>,
  TError = ErrorType<unknown>,
>(
  params?: GetFactsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFacts>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxios>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetFactsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
